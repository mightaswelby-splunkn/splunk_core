#!/bin/bash

##################################################################
#    SPLUNK UPGRADE                                              #
#                                                                #
#    Sections :-                                                 #
#       HF/Deployer/Deployment Manager/Standalone Architecture   #
#       Indexer Peer                                             #
#       Cluster Master                                           #
#       Search Head Cluster                                      #
#       Standalone Search head                                   #
#       Version :- 1.5                                           #
#                                                                #
################################################################## 
                
                

#########################################################################
#The Script is designed in accordance with the Splunk Architecture      #
#                                                                       #
#   Splunk Should be installed on /opt of the Host Machine              #
#       The new package gets downloaded via the wget utility            #
#       Enable your host mahines Proxies prior to running the Script    #
#       Always run it in Bash Mode                                      #
#                                                                       #
### #####################################################################


## create splunk upgrade directory and set ownership ##


echo ""

echo "Creating Splunk upgrade directory"
mkdir /opt/splunk/upgrade
#chown splunk.splunk /opt/splunk/upgrade

echo ""




a=`cat /opt/splunk/etc/system/local/server.conf |grep -i "mode"|awk '{print $3}'`

a1=`cat /opt/splunk/etc/system/local/server.conf |grep -i "shclustering"|tr -d '['|tr -d ']'`


if [ "$a" != "slave" ] && [ "$a" != "searchhead" ] && [ "$a" != "master" ]

        then

                echo "This instance is acting as HF, Deployer OR Deployment Manager where you can follow the normal upgrade process!"

                echo ""
          
         
## HF/Deployer/Deployment Manager ##


echo "Script will be common for SPLUNK upgrade process in Heavy Forwarder/Deployer/Deployment Manager/Standalone Architecture"

echo ""

echo "Splunk Upgrade Process In Progress"

echo ""

        a=`/opt/splunk/bin/splunk version`
                                 
        echo "Checks the current Splunk Version installed $a"
                   
                sleep 2

                        echo ""

        HOST_NAME=$(hostname)

        echo "Starts the Upgrade Process on $HOST_NAME"

                sleep 2

                        echo ""

                /opt/splunk/bin/splunk stop

        echo "Splunk is Stopped"

                sleep 5

                        echo ""

        HOST_NAME=$(hostname)

        echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION ON HOST $HOST_NAME IS INITIATED"

                echo ""

        SPLUNK_WGET_PACKAGE=$(wget -O splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=8.2.0&product=splunk&filename=splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz&wget=true')

        SPLUNK_INSTALL_FILE="splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz"

read -p "Do you want to start the Upgrade Process [type 'y' to continue 'n' to exit] " -n 1 -r
        echo
                if [[ $REPLY =~ ^[Yy]$ ]]
                        then

                                echo "SPLUNK PACKAGE UNTARING, PLEASE WAIT ...."

                echo ""


                

## PROGRESS BAR ##
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
#function ProgressBar {
# Process data
#    let _progress=(${1}*100/${2}*100)/100
#    let _done=(${_progress}*4)/10
#    let _left=40-$_done
# Build progressbar string lengths
#    _fill=$(printf "%${_done}s")
#    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
#printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

#}

# Variables
#_start=1

# This accounts as the "totalState" variable for the ProgressBar function
#_end=100

# Proof of concept
#for number in $(seq ${_start} ${_end})
#do
#    sleep 0.3
#    ProgressBar ${number} ${_end}
#done
printf '\nSPLUNK PACKAGE IS EXTRACTED AND YOU CAN VALIDATE SPLUNK FOLDER CREATED ON /opt!\n'

    echo ""

        echo "Please wait ...... "


                echo "The package is getting Untarred"

    tar -zxvf $SPLUNK_INSTALL_FILE -C /opt > /opt/output.txt

             echo "SPLUNK ENTERPRISE TAR FILE IS INSTALLED ON $HOST_NAME "

             echo ""


#Validates Splunk Package Size#

b=`du -h splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz | awk '{print $1}'`
echo " SPLUNK ENTERPRISE PACKAGE SIZE $b"

echo ""


#This command will automatically accept the migration from older splunk version to newer version #

`/opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt > /opt/output.txt`


read -p "DO YOU WANT TO CHECK THE SPLUNK VERSION MIGRATION DETAILS? [type y to continue n to exit] " -n 1 -r

if [[ $REPLY =~ ^[Yy]$ ]]

        then

           c=`cat /opt/output.txt`

           echo "Splunk Migration Details $c"

           echo ""


        elif [[ $REPLY =~ ^[Nn]$ ]]
        then
             echo "NO WE WILL PROCCED WITHOUT CHECKING THE SPLUNK MIGARTION DETAILS"

             echo ""

                 exit 1
     fi


#Checks splunk status#


d=`/opt/splunk/bin/splunk status`
echo "Splunk Status $d"

        echo ""

#check Splunk version #

e=`/opt/splunk/bin/splunk version`
echo "Splunk New Version $e"

        echo ""
             
                         
                elif [[ $REPLY =~ ^[Nn]$ ]]
            then
                echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION IS CANCELLED"

                echo ""

                                        exit 1
                fi



## Indexer Peer  ##


    elif [ $a == 'slave' ]

                then

                        echo "This instance is acting as an Search Peer"

            echo ""
                         
                                echo "Indexer Upgrade !!"

                echo ""


`/opt/splunk/bin/splunk list peer-info -auth admin:changeme > /opt/output.txt`

y=`cat /opt/output.txt |grep -i 'maintenance_mode:*'|sed -e 's/^[ \t]*//'`

if [ "$y" == "maintenance_mode:1" ]

  then 
  
echo "maintenance_mode is enabled the Upgarde will start"

echo ""

 
read -p "Do You want to start the Indexer Upgrade Process  [type 'y' to continue 'n' to exit]" -n 1 -r

echo

    if [[ $REPLY =~ ^[Yy]$ ]]
        then
            echo "Please start the Indexer rolling Upgrade Process"

            echo ""


              a=`/opt/splunk/bin/splunk version`
                 echo "Checks the current Splunk Version installed $a"

                 echo ""

                   sleep 2

                  HOST_NAME=$(hostname)

                  echo "Starts the Upgrade Process on $HOST_NAME"

                 echo ""


                   sleep 2


  /opt/splunk/bin/splunk offline

echo "Taking the peer down gracefully, allowing any in-progress searches to complete while quickly returning the cluster to a fully searchable state"

echo ""

        sleep 5

            ##Downlaoding the new package and starting Splunk #
            ## Proxy ##


HOST_NAME=$(hostname)

echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION ON HOST $HOST_NAME IS INITIATED"

echo ""

SPLUNK_WGET_PACKAGE=$(wget -O splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=8.2.0&product=splunk&filename=splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz&wget=true')

SPLUNK_INSTALL_FILE="splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz"

read -p "Do you want to start the Upgrade Process [type 'y' to continue 'n' to exit] " -n 1 -r
    echo
       if [[ $REPLY =~ ^[Yy]$ ]]
          then
            
                echo "SPLUNK PACKAGE IS GETTING UNTARED PLEASE WAIT ...."

                echo ""

                sleep 5

## PROGRESS BAR ##
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
#function ProgressBar {
# Process data
#    let _progress=(${1}*100/${2}*100)/100
#    let _done=(${_progress}*4)/10
#    let _left=40-$_done
# Build progressbar string lengths
#    _fill=$(printf "%${_done}s")
#    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
#printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

#}

# Variables
#_start=1

# This accounts as the "totalState" variable for the ProgressBar function
#_end=100

# Proof of concept
#for number in $(seq ${_start} ${_end})
#do
#    sleep 0.3
#    ProgressBar ${number} ${_end}
#done
printf '\nSPLUNK PACKAGE IS EXTRACTED AND YOU CAN VALIDATE SPLUNK FOLDER CREATED ON /opt!\n'

sleep 5

echo "Please wait ...... "

echo ""



echo "The package is getting Untarred"

echo ""


    tar -zxvf $SPLUNK_INSTALL_FILE -C /opt > /opt/output.txt

             echo "SPLUNK ENTERPRISE TAR FILE IS INSTALLED ON $HOST_NAME "

             echo ""



#Validates Splunk Package Size#

b=`du -h splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz | awk '{print $1}'`

echo " SPLUNK ENTERPRISE PACKAGE SIZE $b"

echo ""



#This command will automatically accept the migration from older splunk version to newer version #

`/opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt > /opt/output.txt`


read -p "DO YOU WANT TO CHECK THE SPLUNK VERSION MIGRATION DETAILS? [type y to continue n to exit] " -n 1 -r

if [[ $REPLY =~ ^[Yy]$ ]]

        then

           c=`cat /opt/output.txt`

           echo "Splunk Migration Details $c"

           echo ""



        elif [[ $REPLY =~ ^[Nn]$ ]]
        then
             echo "NO WE WILL PROCCED WITHOUT SEEING THE SPLUNK MIGARTION DETAILS"

             echo ""

                 exit 1
     fi


#Checks splunk status#


d=`/opt/splunk/bin/splunk status`
echo "Splunk Status $d"
echo ""



#check Splunk version #

e=`/opt/splunk/bin/splunk version`
echo "Splunk New Version $e"
echo ""

             elif [[ $REPLY =~ ^[Nn]$ ]]
                    then
                          echo "SPLUNK PACKAGE INSTALLATION IS CANCELLED"
                          echo ""
                 exit 1
      fi


                         elif [[ $REPLY =~ ^[Nn]$ ]]
                    then
                          echo "SPLUNK PACKAGE INSTALLATION IS CANCELLED BECAUSE THE HEALTH CHECK ON CLUSTER PEER OUTPUT IS NOT JUSTIFIED"
                    echo ""
                 exit 1
      fi


elif [ "$y" == "maintenance_mode:0" ]

then 

echo "Splunk Upgarde Cannot start please enable the splunk upgrade-init cluster-peers from the Cluster Master"

echo ""

exit 1

fi 



## Cluster Master  ## 


                        elif [ $a == 'master' ]

                                then

                                        echo "This instance is acting as a Cluster Master"
                    echo ""





## To upgrade an indexer cluster with minimal search interruption, perform the following steps:


echo "Run preliminary health checks to confirm that the cluster is in a healthy state before you begin the upgrade:"

echo ""

echo ""


/opt/splunk/bin/splunk show cluster-status --verbose -auth admin:changeme > /opt/output.txt

r1=`cat /opt/output.txt |grep -i 'Replication factor met*' |tr -d '├──────*'|tr -d '.' |awk '{print $4}'`

r2=`cat /opt/output.txt |grep -i 'Search factor met*' |tr -d '├──────*'|tr -d '.' |awk '{print $4}'`

r3=`cat /opt/output.txt |grep -i 'All data is searchable*' |tr -d '├──────*'|tr -d '.' |awk '{print $5}'`

r4=`cat /opt/output.txt |grep -i 'All peers are up*' |tr -d '├──────*'|tr -d '.' |awk '{print $5}'`

r5=`cat /opt/output.txt |grep -i 'CM version is compatible*' |tr -d '├──────*'|tr -d '.' |awk '{print $5}'`

r6=`cat /opt/output.txt |grep -i 'No fixup tasks in progress*' |tr -d '├──────*'|tr -d '.' |awk '{print $6}'`


echo "$r1  ,$r2  ,$r3  ,$r4 , $r5 , $r6 "

echo ""


if [ $r1 == 'YES' ] && [ $r2 == 'YES' ] && [ $r3 == 'YES' ] && [ $r4 == 'YES' ]&& [ $r5 == 'YES' ] && [ $r6 == 'YES' ];

    then

        echo "Replication factor, Search factor, All data is searchable, All peers are up, CM version is compatible and No fixup tasks is in progress you may start the Upgrade Process"

echo ""

read -p "The output shows that the health check is successful, which indicates the cluster is in a searchable state to perform a rolling upgrade [type 'y' to continue 'n' to exit] " -n 1 -r

echo

    if [[ $REPLY =~ ^[Yy]$ ]]
        then
            echo "Please start the Cluster Master Rolling Upgrade Process"

              a=`/opt/splunk/bin/splunk version`

                 echo "Checks the current Splunk Version installed $a"

                 echo ""

                   sleep 2

                  HOST_NAME=$(hostname)

                  echo "Starts the Upgrade Process on $HOST_NAME"

                  echo ""
            

                   sleep 2


  /opt/splunk/bin/splunk stop

echo "Splunk is stopped"

echo ""

        sleep 5

            

HOST_NAME=$(hostname)

echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION ON HOST $HOST_NAME IS INITIATED"

echo ""

SPLUNK_WGET_PACKAGE=$(wget -O splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=8.2.0&product=splunk&filename=splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz&wget=true')

SPLUNK_INSTALL_FILE="splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz"


read -p "Do you want to untar the new Splunk package [type 'y' to continue 'n' to exit] " -n 1 -r
    echo
       if [[ $REPLY =~ ^[Yy]$ ]]
          then
             
                echo "SPLUNK PACKAGE IS GETTING UNTARED PLEASE WAIT ...."

                echo ""

                sleep 5

## PROGRESS BAR ##
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
#function ProgressBar {
# Process data
#    let _progress=(${1}*100/${2}*100)/100
#    let _done=(${_progress}*4)/10
#    let _left=40-$_done
# Build progressbar string lengths
#    _fill=$(printf "%${_done}s")
#    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
#printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

#}

# Variables
#_start=1

# This accounts as the "totalState" variable for the ProgressBar function
#_end=100

# Proof of concept
#for number in $(seq ${_start} ${_end})
#do
    sleep 0.3
#    ProgressBar ${number} ${_end}
#done
printf '\nSPLUNK PACKAGE IS EXTRACTED AND YOU CAN VALIDATE SPLUNK FOLDER CREATED ON /opt!\n'

sleep 5

echo "Please wait ...... "

echo ""



echo "The package is getting Untarred"

echo ""

    tar -zxvf $SPLUNK_INSTALL_FILE -C /opt > /opt/output.txt

             echo "SPLUNK ENTERPRISE TAR FILE IS INSTALLED ON $HOST_NAME "

             echo ""



#Validates Splunk Package Size#

b=`du -h splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz | awk '{print $1}'`
echo " SPLUNK ENTERPRISE PACKAGE SIZE $b"

echo ""


#This command will automatically accept the migration from older splunk version to newer version #

`/opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt > /opt/output.txt`


read -p "DO YOU WANT TO CHECK THE SPLUNK VERSION MIGRATION DETAILS? [type y to continue n to exit] " -n 1 -r

if [[ $REPLY =~ ^[Yy]$ ]]

        then

           c=`cat /opt/output.txt`
           echo "Splunk Migration Details $c"

           echo ""



        elif [[ $REPLY =~ ^[Nn]$ ]]
        then
             echo "NO WE WILL PROCCED WITHOUT SEEING THE SPLUNK MIGARTION DETAILS"

             echo ""

                 exit 1
     fi


#Checks splunk status#


d=`/opt/splunk/bin/splunk status`
echo "Splunk Status $d"

echo ""


#check Splunk version #

e=`/opt/splunk/bin/splunk version`
echo "Splunk New Version $e"

echo ""


             elif [[ $REPLY =~ ^[Nn]$ ]]
                    then
                          echo "SPLUNK PACKAGE INSTALLATION IS CANCELLED"
                          echo ""
                 exit 1
      fi


                         elif [[ $REPLY =~ ^[Nn]$ ]]
                    then
                          echo "SPLUNK PACKAGE INSTALLATION IS CANCELLED BECAUSE THE HEALTH CHECK ON CLUSTER PEER OUTPUT IS NOT JUSTIFIED"
                          echo ""
                 exit 1
      fi

else


  echo "One of the results is not satisfied"

  echo ""

  echo "We cannot start the upgrade process"

  echo ""

  exit 1


  fi


## Search Head Cluster  ##


        elif [ "$a" == 'searchhead' ] && [ "$a1" == 'shclustering' ]
                then

                        echo "This instance is acting as an Search Head Cluster "

            echo ""



echo "Run preliminary health checks to confirm that the cluster is in a healthy state before you begin the upgrade:"

echo ""


/opt/splunk/bin/splunk show shcluster-status --verbose -auth admin:changeme > /opt/output.txt

a=`cat /opt/output.txt |grep -i 'dynamic_captain*'| tr -d ":"| sed -e 's/^[ \t]*//'`
b=`cat /opt/output.txt |grep -i 'stable_captain*'| tr -d ":"| sed -e 's/^[ \t]*//'`
c=`cat /opt/output.txt |grep -i 'service_ready_flag*'| tr -d ":"| sed -e 's/^[ \t]*//'`

echo "The cluster has a dynamically elected captain $a"

echo ""

echo "The current captain maintains captaincy for at least 10 heartbeats, based on the elected_captain timestamp. (˜ 50 secs, but can vary depending on hearbeat_period) $b"

echo ""

echo "The cluster has enough members to support the replication factor $c"

echo ""

echo "The criteria used to determine the health of the search head cluster will be run "


a=`cat /opt/output.txt |grep -i 'dynamic_captain*'| tr -d ":"| tr -d "  "| sed -e 's/^[ \t]*//'`
b=`cat /opt/output.txt |grep -i 'stable_captain*'| tr -d ":"| tr -d "  "| sed -e 's/^[ \t]*//'`
c=`cat /opt/output.txt |grep -i 'service_ready_flag*'| tr -d ":"| tr -d "  "| sed -e 's/^[ \t]*//'`

if [ $a == 'dynamic_captain1' ] && [ $b == 'stable_captain1' ] && [ $c == 'service_ready_flag1' ]

  then

        echo "You are good to start the Search Rolling Upgrade"
        echo ""


   else
                echo "One of the results is not satisfied"
        echo ""

                        echo "We cannot start the upgrade process"
            echo ""

  exit 1


  fi



read -p "The output shows a stable, dynamically elected captain, enough members to support the replication factor, no out-of-sync nodes, and all members running a compatible Splunk Enterprise version (7.1.0 or later). This indicates that the cluster is in a healthy state to perform a rolling upgrade. [type 'y' to continue 'n' to exit] " -n 1 -r

echo
    if [[ $REPLY =~ ^[Yy]$ ]]
        then
            echo "Please start the Search Head Rolling Upgrade Process"
            echo ""

              a=`/opt/splunk/bin/splunk version`
                 echo "Checks the current Splunk Version installed $a"
                 echo ""
                   sleep 2

                  HOST_NAME=$(hostname)

                  echo "Starts the Upgrade Process on $HOST_NAME"
                  echo ""

                   sleep 2

                                                echo "Putting a member into manual detention mode"
                        echo ""

                                                /opt/splunk/bin/splunk edit shcluster-config -manual_detention on

                   sleep 2

                    echo "Confirm the member is ready for upgrade"

                    echo ""

                         a=`/opt/splunk/bin/splunk list shcluster-member-info | grep -w 'active_historical_search_count:0\|active_realtime_search_count:0'`

                         b=`echo "$?"`

                          if [ "$b" == "0" ]

                           then

echo ""

echo "The active historical search count and active realtime search count is fine $a"

echo ""


elif [ "$b" == "1" ]

                then

         echo "The following output indicates that all historical and real-time searches are not yet complete:"

         echo ""

until [ "$b" == "1" ]

do

        sleep 10

echo "Please wait till the count of active_historical_search_count and active_realtime_search_count becomes 0 "

echo ""

echo "will re-run the command"

echo ""

         /opt/splunk/bin/splunk list shcluster-member-info | grep -w 'active_historical_search_count:0\|active_realtime_search_count:0'

         done



fi

/opt/splunk/bin/splunk stop
 echo "Splunk is stopped"

 echo ""

        sleep 5

            


HOST_NAME=$(hostname)

echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION ON HOST $HOST_NAME IS INITIATED"

echo ""

SPLUNK_WGET_PACKAGE=$(wget -O splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=8.2.0&product=splunk&filename=splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz&wget=true')

SPLUNK_INSTALL_FILE="splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz"

read -p "Do you want to start the Upgrade Process [type 'y' to continue 'n' to exit] " -n 1 -r
    echo
       if [[ $REPLY =~ ^[Yy]$ ]]
          then
             
                echo "SPLUNK PACKAGE IS GETTING UNTARED PLEASE WAIT ...."

                sleep 5

## PROGRESS BAR ##
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
#function ProgressBar {
# Process data
#    let _progress=(${1}*100/${2}*100)/100
#    let _done=(${_progress}*4)/10
#    let _left=40-$_done
# Build progressbar string lengths
#    _fill=$(printf "%${_done}s")
#    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
#printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

#}

# Variables
#_start=1

# This accounts as the "totalState" variable for the ProgressBar function
#_end=100

# Proof of concept
#for number in $(seq ${_start} ${_end})
#do
#    sleep 0.3
#    ProgressBar ${number} ${_end}
#done
printf '\nSPLUNK PACKAGE IS EXTRACTED AND YOU CAN VALIDATE SPLUNK FOLDER CREATED ON /opt!\n'

sleep 5

echo ""

echo "Please wait .... "

echo ""

    tar -zxvf $SPLUNK_INSTALL_FILE -C /opt > /opt/output.txt
       
             echo "SPLUNK ENTERPRISE TAR FILE IS INSTALLED ON $HOST_NAME "

             echo ""


#Validates Splunk Package Size#

b=`du -h splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz | awk '{print $1}'`
echo " SPLUNK ENTERPRISE PACKAGE SIZE $b"

echo ""


#This command will automatically accept the migration from older splunk version to newer version #

`/opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt > /opt/output.txt`


read -p "DO YOU WANT TO CHECK THE SPLUNK VERSION MIGRATION DETAILS? [type y to continue n to exit] " -n 1 -r

if [[ $REPLY =~ ^[Yy]$ ]]

        then

           c=`cat /opt/output.txt`
           echo "Splunk Migration Details $c"

           echo ""


        elif [[ $REPLY =~ ^[Nn]$ ]]
        then
             echo "NO WE WILL PROCCED WITHOUT SEEING THE SPLUNK MIGARTION DETAILS"

             echo ""

                 exit 1
     fi


#Checks splunk status#


d=`/opt/splunk/bin/splunk status`
echo "Splunk Status $d"
echo ""


#check Splunk version #

e=`/opt/splunk/bin/splunk version`
echo "Splunk New Version $e"
echo ""

             elif [[ $REPLY =~ ^[Nn]$ ]]
                    then
                          echo "SPLUNK PACKAGE INSTALLATION IS CANCELLED"
                          echo ""
                 exit 1
      fi


                         elif [[ $REPLY =~ ^[Nn]$ ]]
                    then
                          echo "SPLUNK PACKAGE INSTALLATION IS CANCELLED BECAUSE THE HEALTH CHECK ON CLUSTER PEER OUTPUT IS NOT JUSTIFIED"
                          echo ""
                 exit 1
      fi



##Standalone Search head ##

else

                echo "This instance is acting as a Standalone search head "
        echo ""

                echo "Initiating the Upgrade for Standalone Search head"
        echo ""

echo ""

echo "Splunk Upgrade Process In Progress"

echo ""

        a=`/opt/splunk/bin/splunk version`
                                 
        echo "Checks the current Splunk Version installed $a"
                   
                sleep 2

                        echo ""

        HOST_NAME=$(hostname)

        echo "Starts the Upgrade Process on $HOST_NAME"

                sleep 2

                        echo ""

                /opt/splunk/bin/splunk stop

        echo "Splunk is stopped"

                sleep 5

                        echo ""

        HOST_NAME=$(hostname)

        echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION ON HOST $HOST_NAME IS INITIATED"

                echo ""

        SPLUNK_WGET_PACKAGE=$(wget -O splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=8.2.0&product=splunk&filename=splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz&wget=true')

        SPLUNK_INSTALL_FILE="splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz"

read -p "Do you want to start the Upgrade Process [type 'y' to continue 'n' to exit] " -n 1 -r
        echo
                if [[ $REPLY =~ ^[Yy]$ ]]
                        then

                                echo "SPLUNK PACKAGE IS GETTING UNTARED PLEASE WAIT ...."

                echo ""

############ PROGRESS BAR ############
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
#function ProgressBar {
# Process data
#    let _progress=(${1}*100/${2}*100)/100
#    let _done=(${_progress}*4)/10
#    let _left=40-$_done
# Build progressbar string lengths
#    _fill=$(printf "%${_done}s")
#    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
#printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

#}

# Variables
#_start=1

# This accounts as the "totalState" variable for the ProgressBar function
#_end=100

# Proof of concept
#for number in $(seq ${_start} ${_end})
#do
#    sleep 0.3
#    ProgressBar ${number} ${_end}
#done
printf '\nSPLUNK PACKAGE IS EXTRACTED AND YOU CAN VALIDATE SPLUNK FOLDER CREATED ON /opt!\n'

        echo "Please wait ...... "
    echo ""


                echo "The package is getting Untarred"
        echo ""

    tar -zxvf $SPLUNK_INSTALL_FILE -C /opt > /opt/output.txt

             echo "SPLUNK ENTERPRISE TAR FILE IS INSTALLED ON $HOST_NAME "
             echo ""


#Validates Splunk Package Size#

b=`du -h splunk-8.2.0-e053ef3c985f-Linux-x86_64.tgz | awk '{print $1}'`
echo " SPLUNK ENTERPRISE PACKAGE SIZE $b"
echo ""


#This command will automatically accept the migration from older splunk version to newer version #

`/opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt > /opt/output.txt`


read -p "DO YOU WANT TO CHECK THE SPLUNK VERSION MIGRATION DETAILS? [type y to continue n to exit] " -n 1 -r

if [[ $REPLY =~ ^[Yy]$ ]]

        then

           c=`cat /opt/output.txt`
           echo "Splunk Migration Details $c"
           echo ""


        elif [[ $REPLY =~ ^[Nn]$ ]]
        then
             echo "NO WE WILL PROCCED WITHOUT CHECKING THE SPLUNK MIGARTION DETAILS"
             echo ""
                 exit 1
     fi


#Checks splunk status#


d=`/opt/splunk/bin/splunk status`
echo "Splunk Status $d"

        echo ""

#check Splunk version #

e=`/opt/splunk/bin/splunk version`
echo "Splunk New Version $e"

        echo ""
             
                         
                elif [[ $REPLY =~ ^[Nn]$ ]]
            then
                echo "SPLUNK ENTERPRISE PACKAGE INSTALLATION IS CANCELLED"
                                        exit 1
                fi


fi